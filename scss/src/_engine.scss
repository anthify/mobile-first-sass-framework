@import './_global_vars.scss';
@import '../_config.scss';

@if $viewports {
	$viewportList: map-keys($viewports);
	$viewportLength: length($viewportList);
}

@if $margins {
	$marginList: map-keys($margins);
	$marginLength: length($marginList);	
}

@if $padding {
	$paddingList: map-keys($padding);
	$paddingLength: length($paddingList);	
}

@if $grid {
	$gridList: map-keys($grid);
	$gridLength: length($gridList);
}

@if $alignHorizontalChildren {
	$ahcClassNames: map-keys($alignHorizontalChildren);
	$ahcLength: length($ahcClassNames);
}

@if $alignVerticalChildren {
	$avcClassNames: map-keys($alignVerticalChildren);
	$avcLength: length($avcClassNames);
}

@if $orientationLayout {
	$orientationLayoutClassNames: map-keys($orientationLayout);
	$orientationLayoutLength: length($orientationLayoutClassNames);
}


@mixin media($width) {
  @media only screen and (min-width: $width) {
    @content;
  }
}



@mixin engine() {
	@if $viewports {

		@for $i from 1 through $viewportLength {
			$mediaExtend: '%' + nth($viewportList, $i) + '-';
			$mediaName: '.' + nth($viewportList, $i) + '-';
			$mediaWidth: map-get($viewports, nth($viewportList, $i));
			
			@include media($mediaWidth) {

				@include flex($mediaExtend);


				@if $margins {
					@include marginEngine($mediaName);
				}
				
				@if $padding {
					@include paddingEngine($mediaName);
				}

				@if $grid {
					@include gridEngine($mediaName);
				}

				@if $alignHorizontalChildren {
					@include alignHorizontalChildrenEngine($mediaName, $mediaExtend);
				}

				@if $orientationLayout {
					@include orientationLayoutEngine($mediaName, $mediaExtend);
				}
			
			} //@include media
		}//@for loop
	}//@if $viewports

	
	$mediaExtend: '%';
	$mediaName: '.';

	@include flex($mediaExtend)

	@if $margins {
		@include marginEngine($mediaName);
	}

	@if $padding {
		@include paddingEngine($mediaName);
	}

	@if $grid {
		@include gridEngine($mediaName);
	}

	@if $alignHorizontalChildren {
		@include alignHorizontalChildrenEngine($mediaName, $mediaExtend);
	}

	@if $orientationLayout {
		@include orientationLayoutEngine($mediaName, $mediaExtend);
	}

}//Engine


@mixin marginEngine($mediaName) {
	@for $x from 1 through $marginLength {
		$className: nth($marginList, $x);
		@for $n from 1 through length($directions) {
			$d: nth($directions, $n);
			#{$mediaName}margin-#{$d}-#{$className} {
				margin-#{$d}: map-get($margins, $className);
			} 
		}
	}
}

@mixin paddingEngine($mediaName){
	@for $x from 1 through $paddingLength {
		$className: nth($paddingList, $x);
		@for $n from 1 through length($directions) {
			$d: nth($directions, $n);
			#{$mediaName}padding-#{$d}-#{$className} {
				padding-#{$d}: map-get($padding, $className);
			} 
		}
	}
}

@mixin gridEngine($mediaName) {
	@for $i from 1 through $gridLength {
		$name: nth($gridList, $i);
		$columns: map-get($grid, $name);
		@for $x from 1 through $columns {
	    #{$mediaName}#{$name}-#{$x} {
	        $col-width: 100/$columns*$x;
	        max-width:#{$col-width}#{%}; 
	        flex-basis:#{$col-width}#{%};
      		}
		}
	}
}

@mixin alignHorizontalChildrenEngine($mediaName, $mediaExtend) {
	@for $i from 1 through $ahcLength {
		$name: nth($ahcClassNames, $i);
		#{$mediaName}#{$name} {
			@extend #{$mediaExtend}-flex;
			@if map-get($alignHorizontalChildren, $name) == 'left' {
				justify-content: flex-start;
			}
			@if map-get($alignHorizontalChildren, $name) == 'center' {
				justify-content: center;
			}
			@if map-get($alignHorizontalChildren, $name) == 'right' {
				justify-content: flex-end;
			}			
		}
	}
}

@mixin orientationLayoutEngine($mediaName, $mediaExtend) {
	@for $i from 1 through $orientationLayoutLength {
		$name: nth($orientationLayoutClassNames, $i);
		#{$mediaName}#{$name} {
			@extend #{$mediaExtend}-flex;
			@if map-get($orientationLayout, $name) == 'row' {
				flex-direction: row;
			}
			@if map-get($orientationLayout, $name) == 'column' {
				flex-direction: column;
			}
		}
	}
}

@mixin flex($mediaExtend) {
	#{$mediaExtend}-flex {
		display: flex;
	}
}

@include engine();